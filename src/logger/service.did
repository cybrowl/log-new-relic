type Tags = 
 vec record {
       text;
       text;
     };
type Result_1 = 
 variant {
   err: AuthorizationError;
   ok: text;
 };
type Result = 
 variant {
   err: AuthorizationError;
   ok: vec LogEvent;
 };
type Message = text;
type LogEvent = 
 record {
   env: text;
   hostname: text;
   logtype: text;
   message: text;
   tags: Tags;
   time: int;
 };
type AuthorizationError = variant {NotAuthorized: bool;};
service : {
  authorize: () -> (bool);
  clear_logs: () -> (Result_1);
  cycles_low: () -> (bool) query;
  get_logs: () -> (Result) query;
  health: () -> ();
  log_event: (Tags, Message) -> ();
  size: () -> (nat) query;
  version: () -> (nat) query;
  whoami: () -> (text);
}
